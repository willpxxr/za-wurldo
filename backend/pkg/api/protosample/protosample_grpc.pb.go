// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: protosample/protosample.proto

package protosample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtoSampleClient is the client API for ProtoSample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoSampleClient interface {
	Get(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SampleMessage, error)
	Put(ctx context.Context, in *SampleMessage, opts ...grpc.CallOption) (*SampleMessage, error)
}

type protoSampleClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoSampleClient(cc grpc.ClientConnInterface) ProtoSampleClient {
	return &protoSampleClient{cc}
}

func (c *protoSampleClient) Get(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SampleMessage, error) {
	out := new(SampleMessage)
	err := c.cc.Invoke(ctx, "/protosample.ProtoSample/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoSampleClient) Put(ctx context.Context, in *SampleMessage, opts ...grpc.CallOption) (*SampleMessage, error) {
	out := new(SampleMessage)
	err := c.cc.Invoke(ctx, "/protosample.ProtoSample/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoSampleServer is the server API for ProtoSample service.
// All implementations must embed UnimplementedProtoSampleServer
// for forward compatibility
type ProtoSampleServer interface {
	Get(context.Context, *EmptyMessage) (*SampleMessage, error)
	Put(context.Context, *SampleMessage) (*SampleMessage, error)
	mustEmbedUnimplementedProtoSampleServer()
}

// UnimplementedProtoSampleServer must be embedded to have forward compatible implementations.
type UnimplementedProtoSampleServer struct {
}

func (UnimplementedProtoSampleServer) Get(context.Context, *EmptyMessage) (*SampleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProtoSampleServer) Put(context.Context, *SampleMessage) (*SampleMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedProtoSampleServer) mustEmbedUnimplementedProtoSampleServer() {}

// UnsafeProtoSampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoSampleServer will
// result in compilation errors.
type UnsafeProtoSampleServer interface {
	mustEmbedUnimplementedProtoSampleServer()
}

func RegisterProtoSampleServer(s grpc.ServiceRegistrar, srv ProtoSampleServer) {
	s.RegisterService(&ProtoSample_ServiceDesc, srv)
}

func _ProtoSample_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoSampleServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protosample.ProtoSample/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoSampleServer).Get(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoSample_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoSampleServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protosample.ProtoSample/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoSampleServer).Put(ctx, req.(*SampleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoSample_ServiceDesc is the grpc.ServiceDesc for ProtoSample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoSample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protosample.ProtoSample",
	HandlerType: (*ProtoSampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProtoSample_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _ProtoSample_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protosample/protosample.proto",
}
